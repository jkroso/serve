#!/usr/bin/env node

var program = require('commander')
var connect = require('connect')
var http = require('http')
var path = require('path')
var url = require('url')
var fs = require('fs')
var join = path.join
var resolve = path.resolve

// CLI

program
  .version(require('../package.json').version)
  .usage('[options] [dir]')
  .option('-F, --format <fmt>', 'specify the log format string', 'dev')
  .option('-p, --port <port>', 'specify the port [3000]', Number)
  .option('-r, --retries <port>', 'specify the number of alternative ports to try', Number)
  .option('-H, --hidden', 'enable hidden file serving')
  .option('-f, --favicon <path>', 'serve the given favicon')
  .option('-c, --cors', 'allows cross origin access serving')
  .option('-o, --open', 'open a browser tab to the servers root path')
  .option('-J, --no-js', 'disable javascript consolidation')
  .option('-S, --no-stylus', 'disable stylus rendering')
  .option('-M, --no-markdown', 'disable markdown rendering')
  .option('-j, --no-jade', 'disable jade rendering')
  .option('-l  --no-less', 'disable less css rendering')
  .option('-I, --no-icons', 'disable icons')
  .option('-L, --no-logs', 'disable request logging')
  .option('-D, --no-dirs', 'disable directory serving')
  .option('-R, --no-redirects', 'disable index.html redirects')
  .parse(process.argv)

// path
var path = resolve(program.args.shift() || '.')

// setup the app
var app = connect()

// default encoding to utf8
app.use(function(req, res, next){
  res.setHeader('Content-Encoding', 'utf8')
  next()
})

// ignore favicon
app.use(connect.favicon(program.favicon))

// logger
if (program.logs) app.use(connect.logger(program.format))

// convert .styl to .css to trick stylus.middleware
if (program.stylus) {
  app.use(function(req, res, next){
    req.url = req.url.replace(/\.styl$/, '.css')
    next()
  })
  app.use(require('stylus').middleware({ src: path }))
}

// jade
if (program.jade) {
  var jade = require('jade')
  app.use(function(req, res, next){
    if (!req.url.match(/\.jade$/)) return next()
    var file = join(path, url.parse(req.url).pathname)
    fs.readFile(file, 'utf8', function(err, str){
      if (err) return next(err)
      try {
        var fn = jade.compile(str, { filename: file })
        str = fn()
        res.setHeader('Content-Type', 'text/html')
        res.setHeader('Content-Length', Buffer.byteLength(str))
        res.end(str)
      } catch (err) {
        next(err)
      }
    })
  })
}

// less
if (program.less) {
  app.use(require('less-middleware')({ src: path }))
}

// CORS access for files
if (program.cors) {
  app.use(function(req, res, next){
    res.setHeader('Access-Control-Allow-Origin', '*')
    res.setHeader('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, Content-Length, X-Requested-With, Accept, x-csrf-token, origin')
    if ('OPTIONS' == req.method) return res.end()
    next()
  })
}

// redirect directories to index.html
if (program.redirects) {
  app.use(function(req, res, next){
    var url = req.url
    var index = url + 'index.html'
    if (/\/$/.test(url) && fs.existsSync(join(path, index))) {
      res.statusCode = 302
      res.setHeader('Location', index)
      res.end('redirecting to ' + index)
      return
    }
    next()
  })
}

// markdown compiler
if (program.markdown) {
  app.use(require('markdown-middleware')({
    directory: path
  }))
}

// js compiler
if (program.js) {
  app.use(require('serve-js')(path, program))
}

// static files
app.use(connect.static(path, { hidden: program.hidden }))

// directory serving
if (program.dirs) {
  app.use(connect.directory(path, {
    hidden: program.hidden,
    icons: program.icons
  }))
}

if (program.port == null) {
  program.port = 3000
  if (program.retries == null) program.retries = 20
}

var max = program.port + (program.retries || 0)

// start the server
function start(port){
  http.createServer(app)
    .on('error', function(e){
      if (e.message != 'listen EADDRINUSE') throw e
      if (port == max) throw new Error('can\'t find a free port')
      console.log('\033[90mport \033[36m%d\033[90m is taken, trying \033[96m%d\033[0m instead', port, ++port)
      start(port)
    })
    .listen(port, function(){
      var port = this.address().port
      console.log('http://localhost:%d', port)
      if (program.open) require('opener')('http://localhost:'+port)
    })
}

start(program.port)
